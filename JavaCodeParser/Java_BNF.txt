<java> ::= <package> {<import>} <class>
<package> ::= package <package-name> ;
<import> ::= <single-type-import> | <type-import-on-demand>
<single-type-import> ::= import <type-name> ;
<type-import-on-demand> ::= import <package-name> . * ;
<class> ::= <class-modifiers>? class <identifier> <super>? <interfaces>? <class-body>
<class modifier> ::= public | abstract | final
<super> ::= extends <class type>
<interfaces> ::= implements <interface type list>
<class body> ::= "{" {<class body declaration>} "}"
<class body declaration> ::= <class member declaration> | <static initializer>
<class member declaration> ::= <field declaration> | <method declaration>
<static initializer> ::= static <block>
<field declaration> ::= {<field modifier>} <type> <variable declarator> ;
<field modifier> ::= public | protected | private | static | final | transient | volatile
<variable declarator> ::= <variable declarator id>
<variable declarator id> ::= <identifier> | <variable declarator id> [ ]

// start 5.17écÇËçÏã∆
<method declaration> ::= <method header> <method body>
<method header> ::= {<method modifier>} <result type> <method declarator>
<result type> ::= <type> | void
<method modifier> ::= public | protected | private | static | abstract | final | synchronized | native
<method declarator> ::= <identifier> ( <formal parameter list>? )
<method body> ::= .* ;
<interface declaration> ::= {<interface modifier>} interface <identifier> <extends interfaces>? <interface body>
<interface modifier> ::= public | abstract
<extends interfaces> ::= extends <interface type> | <extends interfaces> , <interface type>
<interface body> ::= "{" {<interface member declaration>} "}"
<interface member declaration> ::= <constant declaration> | <abstract method declaration>
<constant declaration> ::= <constant modifiers> <type> <variable declarator>
<constant modifiers> ::= public | static | final
<abstract method declaration>::= {<abstract method modifier>} <result type> <method declarator> ;
<abstract method modifier> ::= public | abstract
// end

<type> ::= <primitive type> | <reference type>
<primitive type> ::= <numeric type> | boolean
<numeric type> ::= <integral type> | <floating-point type>
<integral type> ::= byte | short | int | long | char
<floating-point type> ::= float | double
<reference type> ::= <class or interface type> | <array type>
<class or interface type> ::= <class type> | <interface type>
<class type> ::= <type name>
<interface type> ::= <type name>
<array type> ::= <type> [ ]
